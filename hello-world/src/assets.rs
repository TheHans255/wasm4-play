use crate::{
    sfx::{ChannelMode, Frequency, MusicNote, PanMode, Rest, Track, TrackItem},
    sprite::{Sprite, SpriteFont, Texture2Color, Texture4Color},
};

const BALL_TEXTURE_DATA: [u8; 64] = [
    0x55, 0x50, 0x05, 0x55, 0x55, 0x00, 0x8c, 0x55, 0x54, 0x00, 0x23, 0x15, 0x50, 0x08, 0xcf, 0xc5,
    0x40, 0x02, 0x3f, 0x31, 0x40, 0x08, 0xff, 0xed, 0x00, 0x02, 0x3b, 0x20, 0x00, 0x08, 0xee, 0xc8,
    0x00, 0x00, 0x22, 0x20, 0x00, 0x00, 0x88, 0x88, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01,
    0x50, 0x00, 0x00, 0x05, 0x54, 0x00, 0x00, 0x15, 0x55, 0x00, 0x00, 0x55, 0x55, 0x50, 0x05, 0x55,
];
const BALL_TEXTURE: Texture4Color<'static> = Texture4Color {
    data: &BALL_TEXTURE_DATA,
    stride: 16,
    height: 16,
};
pub const BALL_SPRITE: Sprite<Texture4Color<'static>> = Sprite {
    texture: &BALL_TEXTURE,
    width: 16,
    height: 16,
    src_x: 0,
    src_y: 0,
    draw_colors: 0x4301,
};

// bold_7x5_font
// (should be BLIT_1BPP, is BLIT_1BPP)
const BOLD_7X5_FONT_TEXTURE_DATA: [u8; 420] = [
    0x03, 0xb6, 0xa7, 0x64, 0xe6, 0x33, 0x08, 0x00, 0x00, 0x01, 0x73, 0x9c, 0xeb, 0x7d, 0xdf, 0x73,
    0x80, 0x01, 0x83, 0x0e, 0x73, 0xbc, 0xef, 0x7f, 0xee, 0xdf, 0xff, 0xbc, 0x2b, 0x2e, 0xf3, 0xbc,
    0xef, 0xef, 0x71, 0xde, 0xfe, 0xec, 0x38, 0x80, 0x20, 0x30, 0x00, 0x80, 0xc0, 0xc0, 0x01, 0x87,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x63, 0x30, 0x00, 0x03, 0xb6, 0xaa, 0xe5,
    0x86, 0x61, 0xbe, 0xc0, 0x00, 0x03, 0xcd, 0xb7, 0xbb, 0x63, 0x7b, 0xde, 0xcc, 0x63, 0x7d, 0x9b,
    0x8e, 0xf7, 0xbd, 0xe3, 0x1b, 0xd9, 0x8d, 0xec, 0x57, 0xbb, 0xde, 0xf7, 0xb3, 0x6f, 0x71, 0xde,
    0xc6, 0xcc, 0x19, 0xc0, 0x10, 0x30, 0x00, 0x81, 0x8e, 0xc1, 0x87, 0x83, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x18, 0x15, 0x03, 0xa5, 0xfa, 0x69, 0x84, 0x61, 0x9c, 0xc0,
    0x00, 0x07, 0xd9, 0x86, 0x3b, 0x7b, 0x03, 0xde, 0xcc, 0x66, 0x7c, 0xdb, 0xbe, 0xf7, 0x8d, 0xe3,
    0x10, 0xd9, 0x8d, 0xcc, 0x57, 0x7b, 0xde, 0xf7, 0x83, 0x6f, 0x71, 0xde, 0xcc, 0xce, 0x1b, 0x60,
    0x03, 0xbc, 0xe7, 0xb9, 0x9b, 0xc0, 0x01, 0xb3, 0x6b, 0xce, 0xf3, 0xfc, 0xff, 0xef, 0x75, 0xde,
    0xfe, 0xc3, 0x19, 0x2a, 0x01, 0x00, 0xa7, 0x13, 0xa0, 0x61, 0x95, 0xf0, 0x38, 0x0e, 0xe9, 0x8c,
    0x6f, 0xef, 0xc6, 0x73, 0xc0, 0x0c, 0x00, 0x63, 0xae, 0xfd, 0x8d, 0xfb, 0xd7, 0xf9, 0x8d, 0x8c,
    0x57, 0x3b, 0xf6, 0xfc, 0xe3, 0x6f, 0x71, 0x72, 0x98, 0xc7, 0x18, 0x00, 0x00, 0xf7, 0x8d, 0xef,
    0xfb, 0xf1, 0x87, 0xe3, 0x7f, 0x7b, 0xde, 0xf7, 0x86, 0x6f, 0x75, 0x76, 0xc7, 0x80, 0x0e, 0xd5,
    0x01, 0x01, 0xf2, 0xaf, 0xe0, 0x61, 0x80, 0x40, 0x00, 0x1c, 0xc9, 0x98, 0x3f, 0x8f, 0x66, 0xd8,
    0xcc, 0x66, 0x7c, 0xc6, 0xb7, 0xf7, 0x8d, 0xe3, 0x13, 0xd9, 0x8d, 0xcc, 0x47, 0x3b, 0xc6, 0xf8,
    0x33, 0x6f, 0x71, 0xd9, 0x30, 0xc3, 0x98, 0x00, 0x03, 0xf7, 0x8d, 0xf9, 0x8e, 0xd9, 0x87, 0xc3,
    0x57, 0x7b, 0xde, 0xf6, 0xe6, 0x6f, 0x75, 0x23, 0x8c, 0xc3, 0x18, 0x0a, 0x00, 0x00, 0xaa, 0xcf,
    0x40, 0x61, 0x80, 0x41, 0x00, 0xd8, 0xc9, 0xb3, 0xb3, 0x6f, 0x6c, 0xde, 0xcc, 0x23, 0x7d, 0x80,
    0x86, 0xf7, 0xbd, 0xe3, 0x1b, 0xd9, 0xad, 0xec, 0x47, 0x3b, 0xc6, 0xbd, 0xb3, 0x6d, 0x55, 0xd9,
    0x30, 0xc1, 0x98, 0x00, 0x06, 0xf7, 0x8d, 0xe1, 0x83, 0xd9, 0xb7, 0xe3, 0x57, 0x7b, 0xf3, 0xf0,
    0x36, 0xed, 0x55, 0x70, 0xd8, 0xc3, 0x18, 0x15, 0x01, 0x00, 0xa7, 0x4d, 0xa0, 0x33, 0x00, 0x02,
    0x00, 0xd0, 0x77, 0xfe, 0xe3, 0x39, 0xcc, 0x73, 0x80, 0x01, 0x83, 0x04, 0x7e, 0xfc, 0xef, 0x7f,
    0x0e, 0xdf, 0xd9, 0xbf, 0xc7, 0x2e, 0xc3, 0x76, 0xe3, 0x38, 0x8a, 0xd9, 0x3e, 0xe1, 0xb8, 0x1f,
    0x03, 0xfc, 0xe7, 0xb9, 0x8e, 0xd9, 0x9d, 0xbf, 0xd7, 0x6e, 0xc0, 0xf1, 0xe3, 0x34, 0x8a, 0xdb,
    0xbe, 0x63, 0x30, 0x00,
];
const BOLD_7X5_FONT_TEXTURE: Texture2Color<'static> = Texture2Color {
    data: &BOLD_7X5_FONT_TEXTURE_DATA,
    stride: 480,
    height: 7,
};
pub const BOLD_7X5_FONT: SpriteFont<Texture2Color<'static>> = SpriteFont {
    texture: &BOLD_7X5_FONT_TEXTURE,
    horizontal_padding: 1,
    draw_colors: 0x0010,
};

macro_rules! simple_music_note {
    ($midi_note:expr, $duration:expr, $volume:expr) => {
        TrackItem::Note(MusicNote {
            channel_mode: ChannelMode::Triangle,
            duration_attack: 0,
            duration_decay: 0,
            duration_release: 1,
            duration_sustain: $duration - 1,
            frequency_end: Frequency::Zero,
            frequency_start: Frequency::MIDINote($midi_note, 0),
            volume_attack: 0,
            volume_sustain: $volume,
            pan_mode: PanMode::Center,
        })
    };
}
macro_rules! simple_music_rest {
    ($duration:expr) => {
        TrackItem::Rest(Rest {
            duration: $duration,
        })
    };
}

const TOTAKAS_SONG_DATA: [TrackItem; 32] = [
    simple_music_note!(60, 12, 50),
    simple_music_rest!(12),
    simple_music_note!(60, 6, 50),
    simple_music_note!(62, 6, 50),
    simple_music_note!(64, 12, 50),
    simple_music_rest!(12),
    simple_music_note!(62, 12, 50),
    simple_music_note!(60, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(67, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(64, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(72, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(67, 12, 50),
    simple_music_rest!(60),
    simple_music_note!(67, 12, 50),
    simple_music_rest!(12),
    simple_music_note!(67, 6, 50),
    simple_music_note!(68, 6, 50),
    simple_music_note!(67, 12, 50),
    simple_music_rest!(12),
    simple_music_note!(66, 12, 50),
    simple_music_note!(63, 12, 50),
    simple_music_rest!(60),
    simple_music_note!(62, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(67, 12, 50),
    simple_music_rest!(24),
    simple_music_note!(60, 12, 50),
    simple_music_rest!(60),
];
pub const TOTAKAS_SONG: Track<'static> = Track {
    items: &TOTAKAS_SONG_DATA,
    priority: 1000,
};
